//https://practice.geeksforgeeks.org/problems/negative-weight-cycle/0
//HELP:https://www.geeksforgeeks.org/detect-negative-cycle-graph-bellman-ford/
#include <bits/stdc++.h> 
using namespace std; 
  
// a structure to represent a weighted edge in graph 
struct Edge { 
    int src, dest, weight; 
}; 
  
// a structure to represent a connected, directed and  weighted graph 
struct Graph { 
    // V-> Number of vertices, E-> Number of edges 
    int V, E; 
    // graph is represented as an array of edges. 
    /*struct*/Edge* edge; 
}; 
  
// Creates a graph with V vertices and E edges 
struct Graph* createGraph(int V, int E) 
{ 
    /*struct*/ Graph* graph = new Graph; 
    graph->V = V; 
    graph->E = E; 
    graph->edge = new Edge[graph->E]; 
    return graph; 
} 
  
// The main function that finds shortest distances 
//from src to all other vertices using Bellman- 
// Ford algorithm.  The function also detects 
// negative weight cycle 
bool isNegCycleBellmanFord(struct Graph* graph, 
                           int src) 
{ 
    int V = graph->V; 
    int E = graph->E; 
    int dist[V]; 
  
// Step 1: Initialize distances from src to all other vertices as INFINITE 
    for (int i = 0; i < V; i++) 
        dist[i] = INT_MAX; 
    dist[src] = 0; 
  
    // Step 2: Relax all edges |V| - 1 times. 
// A simple shortest path from src to any other vertex can have atmost |V|-1 
    // edges 
    for (int i = 1; i <= V - 1; i++) { 
        for (int j = 0; j < E; j++) { 
            int u = graph->edge[j].src; 
            int v = graph->edge[j].dest; 
            int weight = graph->edge[j].weight; 
            if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) 
                dist[v] = dist[u] + weight; 
        } 
    } 
  
    // Step 3: check for negative-weight cycles. 
// The above step guarantees shortest distances if graph doesn't contain 
//negative weight cycle.If we get a shorter path, then there is a cycle. 
    for (int i = 0; i < E; i++) { 
        int u = graph->edge[i].src; 
        int v = graph->edge[i].dest; 
        int weight = graph->edge[i].weight; 
        if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) 
            return true; 
    } 
  
    return false; 
} 
  
// Driver program to test above functions 
int main() 
{ 
    int t;
    cin>>t;
    while(t--){
    int V ; // Number of vertices in graph 
    int E ; // Number of edges in graph 
    cin>>V>>E;
    /*struct*/ Graph* graph = createGraph(V, E);
    for(int i=0;i<E;i++)
    {
        cin>>graph->edge[i].src; 
        cin>>graph->edge[i].dest ; 
        cin>>graph->edge[i].weight;  
    }
    if (isNegCycleBellmanFord(graph, 0)) //src vertex=0
        cout <<1<<endl; 
    else
        cout << 0<<endl; 
    }//end while
    return 0; 
} 
