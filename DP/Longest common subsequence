#include <iostream>
//#include<string.h>
#include<algorithm>
using namespace std;
//Using recursion
//time limit exceeded
/*int LCS(char s1[],char s2[],int m, int n){
    if(m==0||n==0) return 0;
    else if(s1[m-1]==s2[n-1]) return 1+LCS(s1,s2,m-1,n-1);
    else return max(LCS(s1,s2,m-1,n),LCS(s1,s2,m,n-1));
}*/
//using DP
//Solution accepted
int LCS(char *s1,char *s2,int m,int n){
    int L[m+1][n+1];
    int i,j;
    for(int i=0;i<=m;i++){
        for(int j=0;j<=n;j++){
            if(i==0||j==0) L[i][j]=0;
            else if(s1[i-1]==s2[j-1])  L[i][j]=1+L[i-1][j-1];
            else L[i][j]= max(L[i-1][j],L[i][j-1]);
        }
    }
    return L[m][n];
}
int main() {
	//code
	int t;
	cin>>t;
	while(t--){
	    int n1,n2;
	    cin>>n1>>n2;//size of string s1, s2
	    /*string s1,s2;
	    getline(cin,s1);
	    getline(cin,s2);*/
	    char s1[n1],s2[n2];
	    for(int i=0;i<n1;i++) cin>>s1[i];
	    for(int i=0;i<n2;i++) cin>>s2[i];
	    int lcs=LCS( s1,s2,n1,n2);
	    cout<<lcs<<endl;
	}
	return 0;
}
