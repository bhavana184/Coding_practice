//https://practice.geeksforgeeks.org/problems/max-sum-without-adjacents/0
//https://www.geeksforgeeks.org/find-maximum-possible-stolen-value-houses/ -HOUSE ROBBER PROBLEM

// { Driver Code Starts
#include <bits/stdc++.h>

using namespace std;


 // } Driver Code Ends


//User function template for C++
class Solution{
public:	
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *arr, int n) {
	    // code here
	    //n:no. of elements in the array
	    //base case
	   // int max_sum=dp[0];
	    vector<int>dp(n,0);
	    for(int i=n-1;i>=0;i--){
	      if(i==n-1) dp[i]=arr[i];//only single element in the array
	     else  if(i==n-2){//you have 2 elements in the array
	         dp[i]=max(arr[i],dp[i+1]);
	      }
	      else{
	          dp[i]=max((arr[i]+dp[i+2]),(0+dp[i+1]));
	      }
	    }//end for
	    return dp[0];
	}
};

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int arr[n];
        for (int i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.findMaxSum(arr, n);
        cout << ans << "\n";
    }
    return 0;
}  // } Driver Code Ends
