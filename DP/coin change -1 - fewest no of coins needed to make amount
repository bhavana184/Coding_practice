//https://leetcode.com/problems/coin-change/
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
         int fewest_no_of_coins_needed;
        int no_of_cointypes=coins.size();
    if(amount==0||no_of_cointypes==0) fewest_no_of_coins_needed = 0;
    int dp[amount+1];
   // for(int i=0;i<amount+1;i++) dp[i]=amount+1;
    fill(dp,dp+amount+1,amount+1);//maximum value to be filled is amount+1
    dp[0]=0;//0 amount can't be build || if we have we'll take 0 coins 
    //=> dp[amount to be made]=no. of coins to be taken
    for(int i=0;i<no_of_cointypes;i++){
        for(int j=coins[i];j<=amount;j++){
            dp[j]=min(dp[j],dp[j-coins[i]]+1);
        }
    }
    if(dp[amount]==amount+1) fewest_no_of_coins_needed=-1;
    else fewest_no_of_coins_needed=dp[amount];
    return fewest_no_of_coins_needed; 
    }
};

/*
    coins={1,2,3}
    amount=4
     dp[0]  |  dp[1]    |dp[2]      |dp[3]      |    dp[4]
j=1    0    |    1      | 2         | 3         | 4
 initialised| dp[1-1]+1 |dp[2-1]+1  | dp[3-1]+1 |dp[4-1]+1
j=2  -      | -         | 1         |  2        | 2         
            |           |dp[2-2]+1  |           |
j=3         | -         |  -        |  1        |2
            |           |           |           |
*/
